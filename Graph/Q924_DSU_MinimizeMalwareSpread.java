import java.util.Arrays;

public class Q924_DSU_MinimizeMalwareSpread {
    int[] par, size;

    public int findPar(int u) {
        if (par[u] == u) {
            return u;
        }

        return par[u] = findPar(par[u]);
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        size = new int[n]; // population Of Country
        par = new int[n];

        for (int i = 0; i < n; i++) {
            par[i] = i;
            size[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            int p1 = findPar(i);
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    if (graph[i][j] == 1) {
                        int p2 = findPar(j);

                        if (p1 != p2) {
                            par[p2] = p1;
                            size[p1] += size[p2];
                        }
                    }
                }
            }
        }

        Arrays.sort(initial);

        int[] ipc = new int[n]; // infected person in a country
        for (int ip : initial) {
            int c = findPar(ip);
            ipc[c]++;
        }

        int maxPopulated = 0;
        int c = initial[0];

        for (int ip : initial) {
            int p = findPar(ip);

            if (ipc[p] == 1 && size[p] > maxPopulated) {
                maxPopulated = size[p];
                c = ip;
            }
        }
        return c;
    }
}
